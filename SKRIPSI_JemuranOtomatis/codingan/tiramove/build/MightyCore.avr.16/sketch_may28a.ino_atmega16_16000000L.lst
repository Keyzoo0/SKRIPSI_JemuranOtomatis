
C:\Users\Ghassani\AppData\Local\Temp\arduino\sketches\00539C16A2EF8A9FBDC427773986DAEB/sketch_may28a.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  24:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_9>
  28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  40:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>

00000054 <__trampolines_end>:
__trampolines_start():
  54:	00 00       	nop
  56:	00 02       	muls	r16, r16
	...
  60:	05 04       	cpc	r0, r5
  62:	00 07       	cpc	r16, r16
	...

00000074 <port_to_output_PGM>:
  74:	00 00 3b 00 38 00 35 00 32 00                       ..;.8.5.2.

0000007e <port_to_mode_PGM>:
  7e:	00 00 3a 00 37 00 34 00 31 00                       ..:.7.4.1.

00000088 <digital_pin_to_port_PGM>:
  88:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
  98:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000a8 <digital_pin_to_bit_mask_PGM>:
  a8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
  b8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000c8 <__ctors_start>:
__ctors_start():
  c8:	fa 02       	muls	r31, r26

000000ca <__ctors_end>:
__dtors_end():
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf e5       	ldi	r28, 0x5F	; 95
  d0:	d4 e0       	ldi	r29, 0x04	; 4
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  d6:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  d8:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  da:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  dc:	e0 e4       	ldi	r30, 0x40	; 64
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  de:	f6 e0       	ldi	r31, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  e2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  e4:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  e6:	a8 37       	cpi	r26, 0x78	; 120
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  e8:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  ec:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  ee:	a8 e7       	ldi	r26, 0x78	; 120
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  f0:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  f6:	a9 39       	cpi	r26, 0x99	; 153
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  f8:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>

000000fc <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
  fc:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
  fe:	c5 e6       	ldi	r28, 0x65	; 101
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
 100:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
 102:	04 c0       	rjmp	.+8      	; 0x10c <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
 104:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
 106:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
 108:	0e 94 18 03 	call	0x630	; 0x630 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
 10c:	c4 36       	cpi	r28, 0x64	; 100
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
 10e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
 110:	c9 f7       	brne	.-14     	; 0x104 <__do_global_ctors+0x8>
 112:	0e 94 cd 02 	call	0x59a	; 0x59a <main>
 116:	0c 94 1e 03 	jmp	0x63c	; 0x63c <_exit>

0000011a <__bad_interrupt>:
__vector_1():
 11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <pinMode.constprop.6>:
pinMode.constprop.6():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit = digitalPinToBitMask(pin);
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	e8 55       	subi	r30, 0x58	; 88
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	24 91       	lpm	r18, Z
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 128:	88 57       	subi	r24, 0x78	; 120
 12a:	9f 4f       	sbci	r25, 0xFF	; 255
 12c:	fc 01       	movw	r30, r24
 12e:	84 91       	lpm	r24, Z
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 130:	88 23       	and	r24, r24
 132:	99 f0       	breq	.+38     	; 0x15a <pinMode.constprop.6+0x3c>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	fc 01       	movw	r30, r24
 13c:	e2 58       	subi	r30, 0x82	; 130
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	a5 91       	lpm	r26, Z+
 142:	b4 91       	lpm	r27, Z
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 144:	fc 01       	movw	r30, r24
 146:	ec 58       	subi	r30, 0x8C	; 140
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	85 91       	lpm	r24, Z+
 14c:	94 91       	lpm	r25, Z
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 14e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
 150:	f8 94       	cli
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 152:	ec 91       	ld	r30, X
 154:	e2 2b       	or	r30, r18
 156:	ec 93       	st	X, r30
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 158:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:59
  }
}
 15a:	08 95       	ret

0000015c <digitalWrite>:
digitalWrite():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
 160:	ec 5a       	subi	r30, 0xAC	; 172
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	24 91       	lpm	r18, Z
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 166:	fc 01       	movw	r30, r24
 168:	e8 55       	subi	r30, 0x58	; 88
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	34 91       	lpm	r19, Z
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 16e:	fc 01       	movw	r30, r24
 170:	e8 57       	subi	r30, 0x78	; 120
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	e4 91       	lpm	r30, Z
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 176:	ee 23       	and	r30, r30
 178:	c9 f0       	breq	.+50     	; 0x1ac <digitalWrite+0x50>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 17a:	22 23       	and	r18, r18
 17c:	39 f0       	breq	.+14     	; 0x18c <digitalWrite+0x30>
turnOffPWM():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 17e:	24 30       	cpi	r18, 0x04	; 4
 180:	f1 f0       	breq	.+60     	; 0x1be <digitalWrite+0x62>
 182:	a8 f4       	brcc	.+42     	; 0x1ae <digitalWrite+0x52>
 184:	21 30       	cpi	r18, 0x01	; 1
 186:	11 f1       	breq	.+68     	; 0x1cc <digitalWrite+0x70>
 188:	22 30       	cpi	r18, 0x02	; 2
 18a:	01 f1       	breq	.+64     	; 0x1cc <digitalWrite+0x70>
digitalWrite():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	ec 58       	subi	r30, 0x8C	; 140
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	a5 91       	lpm	r26, Z+
 198:	b4 91       	lpm	r27, Z
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 19a:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
 19c:	f8 94       	cli
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 19e:	ec 91       	ld	r30, X
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 1a0:	61 11       	cpse	r22, r1
 1a2:	18 c0       	rjmp	.+48     	; 0x1d4 <digitalWrite+0x78>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 1a4:	30 95       	com	r19
 1a6:	3e 23       	and	r19, r30
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 1a8:	3c 93       	st	X, r19
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 1aa:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
 1ac:	08 95       	ret
turnOffPWM():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 1ae:	25 30       	cpi	r18, 0x05	; 5
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <digitalWrite+0x6a>
 1b2:	27 30       	cpi	r18, 0x07	; 7
 1b4:	59 f7       	brne	.-42     	; 0x18c <digitalWrite+0x30>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
 1b6:	85 b5       	in	r24, 0x25	; 37
 1b8:	8f 7d       	andi	r24, 0xDF	; 223
 1ba:	85 bd       	out	0x25, r24	; 37
 1bc:	e7 cf       	rjmp	.-50     	; 0x18c <digitalWrite+0x30>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
 1be:	8f b5       	in	r24, 0x2f	; 47
 1c0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 1c2:	8f bd       	out	0x2f, r24	; 47
 1c4:	e3 cf       	rjmp	.-58     	; 0x18c <digitalWrite+0x30>
 1c6:	8f b5       	in	r24, 0x2f	; 47
 1c8:	8f 7d       	andi	r24, 0xDF	; 223
 1ca:	fb cf       	rjmp	.-10     	; 0x1c2 <digitalWrite+0x66>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
 1cc:	83 b7       	in	r24, 0x33	; 51
 1ce:	8f 7d       	andi	r24, 0xDF	; 223
 1d0:	83 bf       	out	0x33, r24	; 51
 1d2:	dc cf       	rjmp	.-72     	; 0x18c <digitalWrite+0x30>
digitalWrite():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 1d4:	3e 2b       	or	r19, r30
 1d6:	e8 cf       	rjmp	.-48     	; 0x1a8 <digitalWrite+0x4c>

000001d8 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	91 05       	cpc	r25, r1
 1dc:	39 f0       	breq	.+14     	; 0x1ec <delayMicroseconds+0x14>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
 1e6:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <delayMicroseconds+0x10>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
 1ec:	08 95       	ret

000001ee <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 1ee:	af 92       	push	r10
 1f0:	bf 92       	push	r11
 1f2:	cf 92       	push	r12
 1f4:	df 92       	push	r13
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	6c 01       	movw	r12, r24
 204:	7b 01       	movw	r14, r22
 206:	8b 01       	movw	r16, r22
 208:	04 0f       	add	r16, r20
 20a:	15 1f       	adc	r17, r21
 20c:	eb 01       	movw	r28, r22
 20e:	5e 01       	movw	r10, r28
 210:	ae 18       	sub	r10, r14
 212:	bf 08       	sbc	r11, r15
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
 214:	c0 17       	cp	r28, r16
 216:	d1 07       	cpc	r29, r17
 218:	59 f0       	breq	.+22     	; 0x230 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
 21a:	69 91       	ld	r22, Y+
 21c:	d6 01       	movw	r26, r12
 21e:	ed 91       	ld	r30, X+
 220:	fc 91       	ld	r31, X
 222:	01 90       	ld	r0, Z+
 224:	f0 81       	ld	r31, Z
 226:	e0 2d       	mov	r30, r0
 228:	c6 01       	movw	r24, r12
 22a:	09 95       	icall
 22c:	89 2b       	or	r24, r25
 22e:	79 f7       	brne	.-34     	; 0x20e <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
 230:	c5 01       	movw	r24, r10
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	df 90       	pop	r13
 240:	cf 90       	pop	r12
 242:	bf 90       	pop	r11
 244:	af 90       	pop	r10
 246:	08 95       	ret

00000248 <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:303
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:304
  digitalWrite(_enable_pin, LOW);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	8e 81       	ldd	r24, Y+6	; 0x06
 252:	0e 94 ae 00 	call	0x15c	; 0x15c <digitalWrite>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:305
  delayMicroseconds(1);    
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <delayMicroseconds>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:306
  digitalWrite(_enable_pin, HIGH);
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	8e 81       	ldd	r24, Y+6	; 0x06
 262:	0e 94 ae 00 	call	0x15c	; 0x15c <digitalWrite>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:307
  delayMicroseconds(1);    // enable pulse must be >450ns
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <delayMicroseconds>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:308
  digitalWrite(_enable_pin, LOW);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	8e 81       	ldd	r24, Y+6	; 0x06
 272:	0e 94 ae 00 	call	0x15c	; 0x15c <digitalWrite>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:309
  delayMicroseconds(100);   // commands need > 37us to settle
 276:	84 e6       	ldi	r24, 0x64	; 100
 278:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:310
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:309
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
 27e:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <delayMicroseconds>

00000282 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:312
}

void LiquidCrystal::write4bits(uint8_t value) {
 282:	cf 92       	push	r12
 284:	df 92       	push	r13
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	6c 01       	movw	r12, r24
 294:	7c 01       	movw	r14, r24
 296:	87 e0       	ldi	r24, 0x07	; 7
 298:	e8 0e       	add	r14, r24
 29a:	f1 1c       	adc	r15, r1
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:313
  for (int i = 0; i < 4; i++) {
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:314
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 2a0:	06 2f       	mov	r16, r22
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	b8 01       	movw	r22, r16
 2a6:	0c 2e       	mov	r0, r28
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <LiquidCrystal::write4bits(unsigned char)+0x2c>
 2aa:	75 95       	asr	r23
 2ac:	67 95       	ror	r22
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <LiquidCrystal::write4bits(unsigned char)+0x28>
 2b2:	61 70       	andi	r22, 0x01	; 1
 2b4:	f7 01       	movw	r30, r14
 2b6:	81 91       	ld	r24, Z+
 2b8:	7f 01       	movw	r14, r30
 2ba:	0e 94 ae 00 	call	0x15c	; 0x15c <digitalWrite>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:313
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
 2be:	21 96       	adiw	r28, 0x01	; 1
 2c0:	c4 30       	cpi	r28, 0x04	; 4
 2c2:	d1 05       	cpc	r29, r1
 2c4:	79 f7       	brne	.-34     	; 0x2a4 <LiquidCrystal::write4bits(unsigned char)+0x22>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:317
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
 2c6:	c6 01       	movw	r24, r12
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:318
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	df 90       	pop	r13
 2d6:	cf 90       	pop	r12
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:317
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
 2d8:	0c 94 24 01 	jmp	0x248	; 0x248 <LiquidCrystal::pulseEnable()>

000002dc <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:287
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
 2ee:	f6 2e       	mov	r15, r22
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:288
  digitalWrite(_rs_pin, mode);
 2f0:	64 2f       	mov	r22, r20
 2f2:	8c 81       	ldd	r24, Y+4	; 0x04
 2f4:	0e 94 ae 00 	call	0x15c	; 0x15c <digitalWrite>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:291

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 2f8:	8d 81       	ldd	r24, Y+5	; 0x05
 2fa:	8f 3f       	cpi	r24, 0xFF	; 255
 2fc:	19 f0       	breq	.+6      	; 0x304 <LiquidCrystal::send(unsigned char, unsigned char)+0x28>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:292
    digitalWrite(_rw_pin, LOW);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	0e 94 ae 00 	call	0x15c	; 0x15c <digitalWrite>
 304:	0f 2d       	mov	r16, r15
 306:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:295
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 308:	8f 85       	ldd	r24, Y+15	; 0x0f
 30a:	84 ff       	sbrs	r24, 4
 30c:	25 c0       	rjmp	.+74     	; 0x358 <LiquidCrystal::send(unsigned char, unsigned char)+0x7c>
 30e:	6e 01       	movw	r12, r28
 310:	87 e0       	ldi	r24, 0x07	; 7
 312:	c8 0e       	add	r12, r24
 314:	d1 1c       	adc	r13, r1
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
 316:	f1 2c       	mov	r15, r1
 318:	e1 2c       	mov	r14, r1
write8bits():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:322
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 31a:	b8 01       	movw	r22, r16
 31c:	0e 2c       	mov	r0, r14
 31e:	02 c0       	rjmp	.+4      	; 0x324 <LiquidCrystal::send(unsigned char, unsigned char)+0x48>
 320:	75 95       	asr	r23
 322:	67 95       	ror	r22
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <LiquidCrystal::send(unsigned char, unsigned char)+0x44>
 328:	61 70       	andi	r22, 0x01	; 1
 32a:	f6 01       	movw	r30, r12
 32c:	81 91       	ld	r24, Z+
 32e:	6f 01       	movw	r12, r30
 330:	0e 94 ae 00 	call	0x15c	; 0x15c <digitalWrite>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
 334:	ff ef       	ldi	r31, 0xFF	; 255
 336:	ef 1a       	sub	r14, r31
 338:	ff 0a       	sbc	r15, r31
 33a:	88 e0       	ldi	r24, 0x08	; 8
 33c:	e8 16       	cp	r14, r24
 33e:	f1 04       	cpc	r15, r1
 340:	61 f7       	brne	.-40     	; 0x31a <LiquidCrystal::send(unsigned char, unsigned char)+0x3e>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:325
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
 342:	ce 01       	movw	r24, r28
_ZN13LiquidCrystal4sendEhh():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:301
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
write8bits():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:325
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
 354:	0c 94 24 01 	jmp	0x248	; 0x248 <LiquidCrystal::pulseEnable()>
_ZN13LiquidCrystal4sendEhh():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:298
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
 358:	b8 01       	movw	r22, r16
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	75 95       	asr	r23
 35e:	67 95       	ror	r22
 360:	8a 95       	dec	r24
 362:	e1 f7       	brne	.-8      	; 0x35c <LiquidCrystal::send(unsigned char, unsigned char)+0x80>
 364:	ce 01       	movw	r24, r28
 366:	0e 94 41 01 	call	0x282	; 0x282 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:299
    write4bits(value);
 36a:	6f 2d       	mov	r22, r15
 36c:	ce 01       	movw	r24, r28
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:301
  }
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:299
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
 37e:	0c 94 41 01 	jmp	0x282	; 0x282 <LiquidCrystal::write4bits(unsigned char)>

00000382 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.5]>:
_ZN13LiquidCrystal5beginEhhh.constprop.5():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:78
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:79
  if (lines > 1) {
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	29 f4       	brne	.+10     	; 0x394 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.5]+0x12>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:80
    _displayfunction |= LCD_2LINE;
 38a:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <lcd+0xf>
 38e:	98 60       	ori	r25, 0x08	; 8
 390:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <lcd+0xf>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:82
  }
  _numlines = lines;
 394:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <lcd+0x13>
setRowOffsets():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:169

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
 398:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <lcd+0x14>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:170
  _row_offsets[1] = row1;
 39c:	80 e4       	ldi	r24, 0x40	; 64
 39e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <lcd+0x15>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:171
  _row_offsets[2] = row2;
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <lcd+0x16>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:172
  _row_offsets[3] = row3;
 3a8:	80 e5       	ldi	r24, 0x50	; 80
 3aa:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <lcd+0x17>
_ZN13LiquidCrystal5beginEhhh.constprop.5():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:91
  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }

  pinMode(_rs_pin, OUTPUT);
 3ae:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <lcd+0x4>
 3b2:	0e 94 8f 00 	call	0x11e	; 0x11e <pinMode.constprop.6>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:93
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
 3b6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <lcd+0x5>
 3ba:	8f 3f       	cpi	r24, 0xFF	; 255
 3bc:	11 f0       	breq	.+4      	; 0x3c2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.5]+0x40>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:94
    pinMode(_rw_pin, OUTPUT);
 3be:	0e 94 8f 00 	call	0x11e	; 0x11e <pinMode.constprop.6>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:96
  }
  pinMode(_enable_pin, OUTPUT);
 3c2:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <lcd+0x6>
 3c6:	0e 94 8f 00 	call	0x11e	; 0x11e <pinMode.constprop.6>
 3ca:	c1 e8       	ldi	r28, 0x81	; 129
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	9e 01       	movw	r18, r28
 3d0:	21 58       	subi	r18, 0x81	; 129
 3d2:	30 40       	sbci	r19, 0x00	; 0
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:99
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
 3d4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <lcd+0xf>
 3d8:	84 fd       	sbrc	r24, 4
 3da:	0a c0       	rjmp	.+20     	; 0x3f0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.5]+0x6e>
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	21 96       	adiw	r28, 0x01	; 1
 3e2:	28 17       	cp	r18, r24
 3e4:	39 07       	cpc	r19, r25
 3e6:	3c f4       	brge	.+14     	; 0x3f6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.5]+0x74>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:101
  {
    pinMode(_data_pins[i], OUTPUT);
 3e8:	8e 81       	ldd	r24, Y+6	; 0x06
 3ea:	0e 94 8f 00 	call	0x11e	; 0x11e <pinMode.constprop.6>
 3ee:	ef cf       	rjmp	.-34     	; 0x3ce <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.5]+0x4c>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:99
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
 3f0:	88 e0       	ldi	r24, 0x08	; 8
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.5]+0x5e>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:107
   } 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
 3f6:	80 e5       	ldi	r24, 0x50	; 80
 3f8:	93 ec       	ldi	r25, 0xC3	; 195
 3fa:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <delayMicroseconds>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:109
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <lcd+0x4>
 404:	0e 94 ae 00 	call	0x15c	; 0x15c <digitalWrite>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:110
  digitalWrite(_enable_pin, LOW);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <lcd+0x6>
 40e:	0e 94 ae 00 	call	0x15c	; 0x15c <digitalWrite>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:111
  if (_rw_pin != 255) { 
 412:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <lcd+0x5>
 416:	8f 3f       	cpi	r24, 0xFF	; 255
 418:	19 f0       	breq	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:112
    digitalWrite(_rw_pin, LOW);
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	0e 94 ae 00 	call	0x15c	; 0x15c <digitalWrite>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:116
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 420:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <lcd+0xf>
 424:	64 fd       	sbrc	r22, 4
 426:	46 c0       	rjmp	.+140    	; 0x4b4 <__stack+0x55>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:121
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 428:	63 e0       	ldi	r22, 0x03	; 3
 42a:	81 e8       	ldi	r24, 0x81	; 129
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 41 01 	call	0x282	; 0x282 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:122
    delayMicroseconds(4500); // wait min 4.1ms
 432:	84 e9       	ldi	r24, 0x94	; 148
 434:	91 e1       	ldi	r25, 0x11	; 17
 436:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <delayMicroseconds>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:125

    // second try
    write4bits(0x03);
 43a:	63 e0       	ldi	r22, 0x03	; 3
 43c:	81 e8       	ldi	r24, 0x81	; 129
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 41 01 	call	0x282	; 0x282 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:126
    delayMicroseconds(4500); // wait min 4.1ms
 444:	84 e9       	ldi	r24, 0x94	; 148
 446:	91 e1       	ldi	r25, 0x11	; 17
 448:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <delayMicroseconds>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:129
    
    // third go!
    write4bits(0x03); 
 44c:	63 e0       	ldi	r22, 0x03	; 3
 44e:	81 e8       	ldi	r24, 0x81	; 129
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 41 01 	call	0x282	; 0x282 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:130
    delayMicroseconds(150);
 456:	86 e9       	ldi	r24, 0x96	; 150
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <delayMicroseconds>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:133

    // finally, set to 4-bit interface
    write4bits(0x02); 
 45e:	62 e0       	ldi	r22, 0x02	; 2
 460:	81 e8       	ldi	r24, 0x81	; 129
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 41 01 	call	0x282	; 0x282 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:151
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 468:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <lcd+0xf>
 46c:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	81 e8       	ldi	r24, 0x81	; 129
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LiquidCrystal::send(unsigned char, unsigned char)>
_ZN13LiquidCrystal5beginEhhh.constprop.5():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:154

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 478:	84 e0       	ldi	r24, 0x04	; 4
 47a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <lcd+0x10>
command():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	6c e0       	ldi	r22, 0x0C	; 12
 482:	81 e8       	ldi	r24, 0x81	; 129
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LiquidCrystal::send(unsigned char, unsigned char)>
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	81 e8       	ldi	r24, 0x81	; 129
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LiquidCrystal::send(unsigned char, unsigned char)>
clear():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:179

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
 496:	80 ed       	ldi	r24, 0xD0	; 208
 498:	97 e0       	ldi	r25, 0x07	; 7
 49a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <delayMicroseconds>
_ZN13LiquidCrystal5beginEhhh.constprop.5():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:161

  // clear it off
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <lcd+0x11>
command():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	66 e0       	ldi	r22, 0x06	; 6
 4a8:	81 e8       	ldi	r24, 0x81	; 129
 4aa:	90 e0       	ldi	r25, 0x00	; 0
_ZN13LiquidCrystal5beginEhhh.constprop.5():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:165
  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);

}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
command():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
 4b0:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <LiquidCrystal::send(unsigned char, unsigned char)>
_ZN13LiquidCrystal5beginEhhh.constprop.5():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:139
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 4b4:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	81 e8       	ldi	r24, 0x81	; 129
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LiquidCrystal::send(unsigned char, unsigned char)>
_ZN13LiquidCrystal5beginEhhh.constprop.5():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:140
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
    delayMicroseconds(4500);  // wait more than 4.1ms
 4c0:	84 e9       	ldi	r24, 0x94	; 148
 4c2:	91 e1       	ldi	r25, 0x11	; 17
 4c4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <delayMicroseconds>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:143

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 4c8:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <lcd+0xf>
 4cc:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	81 e8       	ldi	r24, 0x81	; 129
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LiquidCrystal::send(unsigned char, unsigned char)>
_ZN13LiquidCrystal5beginEhhh.constprop.5():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:144
    command(LCD_FUNCTIONSET | _displayfunction);
    delayMicroseconds(4500);  // wait more than 4.1ms

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
    delayMicroseconds(150);
 4d8:	86 e9       	ldi	r24, 0x96	; 150
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <delayMicroseconds>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:147

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 4e0:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <lcd+0xf>
 4e4:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
 4e6:	40 e0       	ldi	r20, 0x00	; 0
 4e8:	81 e8       	ldi	r24, 0x81	; 129
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LiquidCrystal::send(unsigned char, unsigned char)>
 4f0:	bb cf       	rjmp	.-138    	; 0x468 <__stack+0x9>

000004f2 <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	08 95       	ret

000004fe <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 4fe:	08 95       	ret

00000500 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	08 95       	ret

00000506 <__vector_9>:
__vector_9():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	3f 93       	push	r19
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
 51c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <timer0_millis>
 520:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <timer0_millis+0x1>
 524:	a0 91 7f 00 	lds	r26, 0x007F	; 0x80007f <timer0_millis+0x2>
 528:	b0 91 80 00 	lds	r27, 0x0080	; 0x800080 <timer0_millis+0x3>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
 52c:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <timer0_fract>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
 530:	23 e0       	ldi	r18, 0x03	; 3
 532:	23 0f       	add	r18, r19
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
 534:	2d 37       	cpi	r18, 0x7D	; 125
 536:	68 f1       	brcs	.+90     	; 0x592 <__vector_9+0x8c>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
 538:	26 e8       	ldi	r18, 0x86	; 134
 53a:	23 0f       	add	r18, r19
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
 53c:	02 96       	adiw	r24, 0x02	; 2
 53e:	a1 1d       	adc	r26, r1
 540:	b1 1d       	adc	r27, r1
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
 542:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <timer0_fract>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
 546:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <timer0_millis>
 54a:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <timer0_millis+0x1>
 54e:	a0 93 7f 00 	sts	0x007F, r26	; 0x80007f <timer0_millis+0x2>
 552:	b0 93 80 00 	sts	0x0080, r27	; 0x800080 <timer0_millis+0x3>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
 556:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 55a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 55e:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__data_end+0x2>
 562:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <__data_end+0x3>
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	a1 1d       	adc	r26, r1
 56a:	b1 1d       	adc	r27, r1
 56c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 570:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 574:	a0 93 7a 00 	sts	0x007A, r26	; 0x80007a <__data_end+0x2>
 578:	b0 93 7b 00 	sts	0x007B, r27	; 0x80007b <__data_end+0x3>
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	3f 91       	pop	r19
 586:	2f 91       	pop	r18
 588:	0f 90       	pop	r0
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	0f 90       	pop	r0
 58e:	1f 90       	pop	r1
 590:	18 95       	reti
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	a1 1d       	adc	r26, r1
 596:	b1 1d       	adc	r27, r1
 598:	d4 cf       	rjmp	.-88     	; 0x542 <__vector_9+0x3c>

0000059a <main>:
main():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 59a:	78 94       	sei
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
 59c:	83 b7       	in	r24, 0x33	; 51
 59e:	83 60       	ori	r24, 0x03	; 3
 5a0:	83 bf       	out	0x33, r24	; 51
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:968
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
 5a2:	83 b7       	in	r24, 0x33	; 51
 5a4:	88 64       	ori	r24, 0x48	; 72
 5a6:	83 bf       	out	0x33, r24	; 51
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
 5a8:	89 b7       	in	r24, 0x39	; 57
 5aa:	81 60       	ori	r24, 0x01	; 1
 5ac:	89 bf       	out	0x39, r24	; 57
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	8e bd       	out	0x2e, r24	; 46
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 5b2:	8e b5       	in	r24, 0x2e	; 46
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	8e bd       	out	0x2e, r24	; 46
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 5b8:	8f b5       	in	r24, 0x2f	; 47
 5ba:	81 60       	ori	r24, 0x01	; 1
 5bc:	8f bd       	out	0x2f, r24	; 47
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
 5be:	85 b5       	in	r24, 0x25	; 37
 5c0:	84 60       	ori	r24, 0x04	; 4
 5c2:	85 bd       	out	0x25, r24	; 37
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
 5c4:	85 b5       	in	r24, 0x25	; 37
 5c6:	80 64       	ori	r24, 0x40	; 64
 5c8:	85 bd       	out	0x25, r24	; 37
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
 5ca:	87 e8       	ldi	r24, 0x87	; 135
 5cc:	86 b9       	out	0x06, r24	; 6
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
 5ce:	1a b8       	out	0x0a, r1	; 10
setup():
C:\Users\Ghassani\AppData\Local\Temp\.arduinoIDE-unsaved2024428-2424-aw9h5c.99ztt\sketch_may28a/sketch_may28a.ino:6
#include <LiquidCrystal.h>

LiquidCrystal lcd (16 , 17 , 18  , 19 , 20 , 21 , 22);

void setup() {
  lcd.begin(16, 2);
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	0e 94 c1 01 	call	0x382	; 0x382 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.5]>
write():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 5d6:	4a e0       	ldi	r20, 0x0A	; 10
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	6c e6       	ldi	r22, 0x6C	; 108
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	81 e8       	ldi	r24, 0x81	; 129
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Print::write(unsigned char const*, unsigned int)>
main():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 5e6:	c0 e0       	ldi	r28, 0x00	; 0
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
 5ea:	20 97       	sbiw	r28, 0x00	; 0
 5ec:	f1 f3       	breq	.-4      	; 0x5ea <main+0x50>
 5ee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 5f2:	fb cf       	rjmp	.-10     	; 0x5ea <main+0x50>

000005f4 <_GLOBAL__sub_I_lcd>:
_ZN5PrintC2Ev():
C:\Users\Ghassani\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 5f4:	e1 e8       	ldi	r30, 0x81	; 129
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	13 82       	std	Z+3, r1	; 0x03
 5fa:	12 82       	std	Z+2, r1	; 0x02
_GLOBAL__sub_I_lcd():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:42
{
  init(0, rs, 255, enable, d0, d1, d2, d3, d4, d5, d6, d7);
}

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
 5fc:	84 e6       	ldi	r24, 0x64	; 100
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	91 83       	std	Z+1, r25	; 0x01
 602:	80 83       	st	Z, r24
init():
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:57

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
{
  _rs_pin = rs;
 604:	80 e1       	ldi	r24, 0x10	; 16
 606:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:58
  _rw_pin = rw;
 608:	81 e1       	ldi	r24, 0x11	; 17
 60a:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:59
  _enable_pin = enable;
 60c:	82 e1       	ldi	r24, 0x12	; 18
 60e:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:61
  
  _data_pins[0] = d0;
 610:	83 e1       	ldi	r24, 0x13	; 19
 612:	87 83       	std	Z+7, r24	; 0x07
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:62
  _data_pins[1] = d1;
 614:	84 e1       	ldi	r24, 0x14	; 20
 616:	80 87       	std	Z+8, r24	; 0x08
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:63
  _data_pins[2] = d2;
 618:	85 e1       	ldi	r24, 0x15	; 21
 61a:	81 87       	std	Z+9, r24	; 0x09
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:64
  _data_pins[3] = d3; 
 61c:	86 e1       	ldi	r24, 0x16	; 22
 61e:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:65
  _data_pins[4] = d4;
 620:	13 86       	std	Z+11, r1	; 0x0b
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:66
  _data_pins[5] = d5;
 622:	14 86       	std	Z+12, r1	; 0x0c
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:67
  _data_pins[6] = d6;
 624:	15 86       	std	Z+13, r1	; 0x0d
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:68
  _data_pins[7] = d7; 
 626:	16 86       	std	Z+14, r1	; 0x0e
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:71

  if (fourbitmode)
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 628:	17 86       	std	Z+15, r1	; 0x0f
C:\Users\Ghassani\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:75
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	0c 94 c1 01 	jmp	0x382	; 0x382 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.5]>

00000630 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 630:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 632:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 634:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 636:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 638:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 63a:	09 94       	ijmp

0000063c <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 63c:	f8 94       	cli

0000063e <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 63e:	ff cf       	rjmp	.-2      	; 0x63e <__stop_program>
